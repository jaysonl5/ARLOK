<?php

/**
 * @file
 * Contains arl_custom.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function arl_custom_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the arl_custom module.
    case 'help.page.arl_custom':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('ARL custom module') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function arl_custom_theme() {
  return [
    'arl_custom' => [
      'render element' => 'children',
    ],
    'arl_custom_link' => [
      'variables' => ['file' => NULL, 'description' => NULL, 'attributes' => []],
    ]
  ];
}
/**
 * Implements hook_entity_update().
 */
function arl_custom_entity_update(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity instanceof \Drupal\node\Entity\Node) {
    if ($entity->getType() === 'files') {
      drupal_flush_all_caches();
    }
  }
}

/**
 * Prepares variables for file link templates.
 *
 * Default template: file-link.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - file: A file object to which the link will be created.
 *   - icon_directory: (optional) A path to a directory of icons to be used for
 *     files. Defaults to the value of the "icon.directory" variable.
 *   - description: A description to be displayed instead of the filename.
 *   - attributes: An associative array of attributes to be placed in the a tag.
 */
function template_preprocess_arl_custom_link(&$variables) {
  $file = $variables['file'];
  $options = [];

  $file_entity = ($file instanceof \Drupal\file\Entity\File) ? $file : \Drupal\file\Entity\File::load($file->fid);
  // @todo Wrap in file_url_transform_relative(). This is currently
  // impossible. As a work-around, we currently add the 'url.site' cache context
  // to ensure different file URLs are generated for different sites in a
  // multisite setup, including HTTP and HTTPS versions of the same site.
  // Fix in https://www.drupal.org/node/2646744.
  $url = file_create_url($file_entity->getFileUri());
  $variables['#cache']['contexts'][] = 'url.site';

  $mime_type = $file->getMimeType();
  // Set options as per anchor format described at
  // http://microformats.org/wiki/file-format-examples
  $options['attributes']['type'] = $mime_type . '; length=' . $file->getSize();

  // Use the description as the link text if available.
  if (empty($variables['description'])) {
    $link_text = $file_entity->getFilename();
  }
  else {
    $link_text = $variables['description'];
    $options['attributes']['title'] = $file_entity->getFilename();
  }

  // Classes to add to the file field for icons.
  $classes = [
    'file',
    // Add a specific class for each and every mime type.
    'file--mime-' . strtr($mime_type, ['/' => '-', '.' => '-']),
    // Add a more general class for groups of well known MIME types.
    'file--' . file_icon_class($mime_type),
  ];

  // Set file classes to the options array.
  $variables['attributes'] = new \Drupal\Core\Template\Attribute($variables['attributes']);
  $variables['attributes']->addClass($classes);

  $variables['link'] = \Drupal\Core\Link::fromTextAndUrl($link_text, \Drupal\Core\Url::fromUri('internal:/' . $link_text));
}
